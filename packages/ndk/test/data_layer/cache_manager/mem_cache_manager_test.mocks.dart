// Mocks generated by Mockito 5.4.6 from annotations
// in ndk/test/data_layer/cache_manager/mem_cache_manager_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:ndk/domain_layer/entities/contact_list.dart' as _i14;
import 'package:ndk/domain_layer/entities/filter.dart' as _i12;
import 'package:ndk/domain_layer/entities/metadata.dart' as _i4;
import 'package:ndk/domain_layer/entities/nip_01_event.dart' as _i3;
import 'package:ndk/domain_layer/entities/nip_05.dart' as _i5;
import 'package:ndk/domain_layer/entities/nip_65.dart' as _i2;
import 'package:ndk/domain_layer/entities/pubkey_mapping.dart' as _i11;
import 'package:ndk/domain_layer/entities/read_write.dart' as _i10;
import 'package:ndk/domain_layer/entities/read_write_marker.dart' as _i8;
import 'package:ndk/domain_layer/entities/relay_set.dart' as _i9;
import 'package:ndk/domain_layer/entities/request_state.dart' as _i13;
import 'package:ndk/domain_layer/entities/user_relay_list.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNip65_0 extends _i1.SmartFake implements _i2.Nip65 {
  _FakeNip65_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNip01Event_1 extends _i1.SmartFake implements _i3.Nip01Event {
  _FakeNip01Event_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMetadata_2 extends _i1.SmartFake implements _i4.Metadata {
  _FakeMetadata_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNip05_3 extends _i1.SmartFake implements _i5.Nip05 {
  _FakeNip05_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserRelayList].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRelayList extends _i1.Mock implements _i6.UserRelayList {
  MockUserRelayList() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get pubKey => (super.noSuchMethod(
        Invocation.getter(#pubKey),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#pubKey),
        ),
      ) as String);

  @override
  int get createdAt => (super.noSuchMethod(
        Invocation.getter(#createdAt),
        returnValue: 0,
      ) as int);

  @override
  int get refreshedTimestamp => (super.noSuchMethod(
        Invocation.getter(#refreshedTimestamp),
        returnValue: 0,
      ) as int);

  @override
  Map<String, _i8.ReadWriteMarker> get relays => (super.noSuchMethod(
        Invocation.getter(#relays),
        returnValue: <String, _i8.ReadWriteMarker>{},
      ) as Map<String, _i8.ReadWriteMarker>);

  @override
  Iterable<String> get urls => (super.noSuchMethod(
        Invocation.getter(#urls),
        returnValue: <String>[],
      ) as Iterable<String>);

  @override
  Iterable<String> get readUrls => (super.noSuchMethod(
        Invocation.getter(#readUrls),
        returnValue: <String>[],
      ) as Iterable<String>);

  @override
  set pubKey(String? _pubKey) => super.noSuchMethod(
        Invocation.setter(
          #pubKey,
          _pubKey,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set createdAt(int? _createdAt) => super.noSuchMethod(
        Invocation.setter(
          #createdAt,
          _createdAt,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set refreshedTimestamp(int? _refreshedTimestamp) => super.noSuchMethod(
        Invocation.setter(
          #refreshedTimestamp,
          _refreshedTimestamp,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set relays(Map<String, _i8.ReadWriteMarker>? _relays) => super.noSuchMethod(
        Invocation.setter(
          #relays,
          _relays,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Nip65 toNip65() => (super.noSuchMethod(
        Invocation.method(
          #toNip65,
          [],
        ),
        returnValue: _FakeNip65_0(
          this,
          Invocation.method(
            #toNip65,
            [],
          ),
        ),
      ) as _i2.Nip65);
}

/// A class which mocks [RelaySet].
///
/// See the documentation for Mockito's code generation for more information.
class MockRelaySet extends _i1.Mock implements _i9.RelaySet {
  MockRelaySet() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  String get pubKey => (super.noSuchMethod(
        Invocation.getter(#pubKey),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#pubKey),
        ),
      ) as String);

  @override
  int get relayMinCountPerPubkey => (super.noSuchMethod(
        Invocation.getter(#relayMinCountPerPubkey),
        returnValue: 0,
      ) as int);

  @override
  _i10.RelayDirection get direction => (super.noSuchMethod(
        Invocation.getter(#direction),
        returnValue: _i10.RelayDirection.inbox,
      ) as _i10.RelayDirection);

  @override
  Map<String, List<_i11.PubkeyMapping>> get relaysMap => (super.noSuchMethod(
        Invocation.getter(#relaysMap),
        returnValue: <String, List<_i11.PubkeyMapping>>{},
      ) as Map<String, List<_i11.PubkeyMapping>>);

  @override
  bool get fallbackToBootstrapRelays => (super.noSuchMethod(
        Invocation.getter(#fallbackToBootstrapRelays),
        returnValue: false,
      ) as bool);

  @override
  List<_i9.NotCoveredPubKey> get notCoveredPubkeys => (super.noSuchMethod(
        Invocation.getter(#notCoveredPubkeys),
        returnValue: <_i9.NotCoveredPubKey>[],
      ) as List<_i9.NotCoveredPubKey>);

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  Iterable<String> get urls => (super.noSuchMethod(
        Invocation.getter(#urls),
        returnValue: <String>[],
      ) as Iterable<String>);

  @override
  set name(String? _name) => super.noSuchMethod(
        Invocation.setter(
          #name,
          _name,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set pubKey(String? _pubKey) => super.noSuchMethod(
        Invocation.setter(
          #pubKey,
          _pubKey,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set relayMinCountPerPubkey(int? _relayMinCountPerPubkey) =>
      super.noSuchMethod(
        Invocation.setter(
          #relayMinCountPerPubkey,
          _relayMinCountPerPubkey,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set direction(_i10.RelayDirection? _direction) => super.noSuchMethod(
        Invocation.setter(
          #direction,
          _direction,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set relaysMap(Map<String, List<_i11.PubkeyMapping>>? _relaysMap) =>
      super.noSuchMethod(
        Invocation.setter(
          #relaysMap,
          _relaysMap,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set fallbackToBootstrapRelays(bool? _fallbackToBootstrapRelays) =>
      super.noSuchMethod(
        Invocation.setter(
          #fallbackToBootstrapRelays,
          _fallbackToBootstrapRelays,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set notCoveredPubkeys(List<_i9.NotCoveredPubKey>? _notCoveredPubkeys) =>
      super.noSuchMethod(
        Invocation.setter(
          #notCoveredPubkeys,
          _notCoveredPubkeys,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void splitIntoRequests(
    _i12.Filter? filter,
    _i13.RequestState? groupRequest,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #splitIntoRequests,
          [
            filter,
            groupRequest,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addMoreRelays(Map<String, List<_i11.PubkeyMapping>>? more) =>
      super.noSuchMethod(
        Invocation.method(
          #addMoreRelays,
          [more],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ContactList].
///
/// See the documentation for Mockito's code generation for more information.
class MockContactList extends _i1.Mock implements _i14.ContactList {
  MockContactList() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get pubKey => (super.noSuchMethod(
        Invocation.getter(#pubKey),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#pubKey),
        ),
      ) as String);

  @override
  List<String> get contacts => (super.noSuchMethod(
        Invocation.getter(#contacts),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<String> get contactRelays => (super.noSuchMethod(
        Invocation.getter(#contactRelays),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<String> get petnames => (super.noSuchMethod(
        Invocation.getter(#petnames),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<String> get followedTags => (super.noSuchMethod(
        Invocation.getter(#followedTags),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<String> get followedCommunities => (super.noSuchMethod(
        Invocation.getter(#followedCommunities),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<String> get followedEvents => (super.noSuchMethod(
        Invocation.getter(#followedEvents),
        returnValue: <String>[],
      ) as List<String>);

  @override
  int get createdAt => (super.noSuchMethod(
        Invocation.getter(#createdAt),
        returnValue: 0,
      ) as int);

  @override
  List<String> get sources => (super.noSuchMethod(
        Invocation.getter(#sources),
        returnValue: <String>[],
      ) as List<String>);

  @override
  set pubKey(String? _pubKey) => super.noSuchMethod(
        Invocation.setter(
          #pubKey,
          _pubKey,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set contacts(List<String>? _contacts) => super.noSuchMethod(
        Invocation.setter(
          #contacts,
          _contacts,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set contactRelays(List<String>? _contactRelays) => super.noSuchMethod(
        Invocation.setter(
          #contactRelays,
          _contactRelays,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set petnames(List<String>? _petnames) => super.noSuchMethod(
        Invocation.setter(
          #petnames,
          _petnames,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set followedTags(List<String>? _followedTags) => super.noSuchMethod(
        Invocation.setter(
          #followedTags,
          _followedTags,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set followedCommunities(List<String>? _followedCommunities) =>
      super.noSuchMethod(
        Invocation.setter(
          #followedCommunities,
          _followedCommunities,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set followedEvents(List<String>? _followedEvents) => super.noSuchMethod(
        Invocation.setter(
          #followedEvents,
          _followedEvents,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set createdAt(int? _createdAt) => super.noSuchMethod(
        Invocation.setter(
          #createdAt,
          _createdAt,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set loadedTimestamp(int? _loadedTimestamp) => super.noSuchMethod(
        Invocation.setter(
          #loadedTimestamp,
          _loadedTimestamp,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set sources(List<String>? _sources) => super.noSuchMethod(
        Invocation.setter(
          #sources,
          _sources,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<List<String>> contactsToJson() => (super.noSuchMethod(
        Invocation.method(
          #contactsToJson,
          [],
        ),
        returnValue: <List<String>>[],
      ) as List<List<String>>);

  @override
  List<List<String>> tagListToJson(
    List<String>? list,
    String? tag,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #tagListToJson,
          [
            list,
            tag,
          ],
        ),
        returnValue: <List<String>>[],
      ) as List<List<String>>);

  @override
  _i3.Nip01Event toEvent() => (super.noSuchMethod(
        Invocation.method(
          #toEvent,
          [],
        ),
        returnValue: _FakeNip01Event_1(
          this,
          Invocation.method(
            #toEvent,
            [],
          ),
        ),
      ) as _i3.Nip01Event);
}

/// A class which mocks [Metadata].
///
/// See the documentation for Mockito's code generation for more information.
class MockMetadata extends _i1.Mock implements _i4.Metadata {
  MockMetadata() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get pubKey => (super.noSuchMethod(
        Invocation.getter(#pubKey),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#pubKey),
        ),
      ) as String);

  @override
  List<String> get sources => (super.noSuchMethod(
        Invocation.getter(#sources),
        returnValue: <String>[],
      ) as List<String>);

  @override
  set pubKey(String? _pubKey) => super.noSuchMethod(
        Invocation.setter(
          #pubKey,
          _pubKey,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set name(String? _name) => super.noSuchMethod(
        Invocation.setter(
          #name,
          _name,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set displayName(String? _displayName) => super.noSuchMethod(
        Invocation.setter(
          #displayName,
          _displayName,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set picture(String? _picture) => super.noSuchMethod(
        Invocation.setter(
          #picture,
          _picture,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set banner(String? _banner) => super.noSuchMethod(
        Invocation.setter(
          #banner,
          _banner,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set website(String? _website) => super.noSuchMethod(
        Invocation.setter(
          #website,
          _website,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set about(String? _about) => super.noSuchMethod(
        Invocation.setter(
          #about,
          _about,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set nip05(String? _nip05) => super.noSuchMethod(
        Invocation.setter(
          #nip05,
          _nip05,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set lud16(String? _lud16) => super.noSuchMethod(
        Invocation.setter(
          #lud16,
          _lud16,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set lud06(String? _lud06) => super.noSuchMethod(
        Invocation.setter(
          #lud06,
          _lud06,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set updatedAt(int? _updatedAt) => super.noSuchMethod(
        Invocation.setter(
          #updatedAt,
          _updatedAt,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set refreshedTimestamp(int? _refreshedTimestamp) => super.noSuchMethod(
        Invocation.setter(
          #refreshedTimestamp,
          _refreshedTimestamp,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set sources(List<String>? _sources) => super.noSuchMethod(
        Invocation.setter(
          #sources,
          _sources,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> toFullJson() => (super.noSuchMethod(
        Invocation.method(
          #toFullJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i3.Nip01Event toEvent() => (super.noSuchMethod(
        Invocation.method(
          #toEvent,
          [],
        ),
        returnValue: _FakeNip01Event_1(
          this,
          Invocation.method(
            #toEvent,
            [],
          ),
        ),
      ) as _i3.Nip01Event);

  @override
  String getName() => (super.noSuchMethod(
        Invocation.method(
          #getName,
          [],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #getName,
            [],
          ),
        ),
      ) as String);

  @override
  bool matchesSearch(String? str) => (super.noSuchMethod(
        Invocation.method(
          #matchesSearch,
          [str],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i4.Metadata copyWith({
    String? pubKey,
    String? name,
    String? displayName,
    String? picture,
    String? banner,
    String? website,
    String? about,
    String? nip05,
    String? lud16,
    String? lud06,
    int? updatedAt,
    int? refreshedTimestamp,
    List<String>? sources,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #pubKey: pubKey,
            #name: name,
            #displayName: displayName,
            #picture: picture,
            #banner: banner,
            #website: website,
            #about: about,
            #nip05: nip05,
            #lud16: lud16,
            #lud06: lud06,
            #updatedAt: updatedAt,
            #refreshedTimestamp: refreshedTimestamp,
            #sources: sources,
          },
        ),
        returnValue: _FakeMetadata_2(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #pubKey: pubKey,
              #name: name,
              #displayName: displayName,
              #picture: picture,
              #banner: banner,
              #website: website,
              #about: about,
              #nip05: nip05,
              #lud16: lud16,
              #lud06: lud06,
              #updatedAt: updatedAt,
              #refreshedTimestamp: refreshedTimestamp,
              #sources: sources,
            },
          ),
        ),
      ) as _i4.Metadata);
}

/// A class which mocks [Nip01Event].
///
/// See the documentation for Mockito's code generation for more information.
class MockNip01Event extends _i1.Mock implements _i3.Nip01Event {
  MockNip01Event() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  String get pubKey => (super.noSuchMethod(
        Invocation.getter(#pubKey),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#pubKey),
        ),
      ) as String);

  @override
  int get createdAt => (super.noSuchMethod(
        Invocation.getter(#createdAt),
        returnValue: 0,
      ) as int);

  @override
  int get kind => (super.noSuchMethod(
        Invocation.getter(#kind),
        returnValue: 0,
      ) as int);

  @override
  List<List<String>> get tags => (super.noSuchMethod(
        Invocation.getter(#tags),
        returnValue: <List<String>>[],
      ) as List<List<String>>);

  @override
  String get content => (super.noSuchMethod(
        Invocation.getter(#content),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#content),
        ),
      ) as String);

  @override
  String get sig => (super.noSuchMethod(
        Invocation.getter(#sig),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#sig),
        ),
      ) as String);

  @override
  List<String> get sources => (super.noSuchMethod(
        Invocation.getter(#sources),
        returnValue: <String>[],
      ) as List<String>);

  @override
  bool get isIdValid => (super.noSuchMethod(
        Invocation.getter(#isIdValid),
        returnValue: false,
      ) as bool);

  @override
  List<String> get tTags => (super.noSuchMethod(
        Invocation.getter(#tTags),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<String> get pTags => (super.noSuchMethod(
        Invocation.getter(#pTags),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<String> get replyETags => (super.noSuchMethod(
        Invocation.getter(#replyETags),
        returnValue: <String>[],
      ) as List<String>);

  @override
  set id(String? _id) => super.noSuchMethod(
        Invocation.setter(
          #id,
          _id,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set createdAt(int? _createdAt) => super.noSuchMethod(
        Invocation.setter(
          #createdAt,
          _createdAt,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set tags(List<List<String>>? _tags) => super.noSuchMethod(
        Invocation.setter(
          #tags,
          _tags,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set content(String? _content) => super.noSuchMethod(
        Invocation.setter(
          #content,
          _content,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set sig(String? _sig) => super.noSuchMethod(
        Invocation.setter(
          #sig,
          _sig,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set validSig(bool? _validSig) => super.noSuchMethod(
        Invocation.setter(
          #validSig,
          _validSig,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set sources(List<String>? _sources) => super.noSuchMethod(
        Invocation.setter(
          #sources,
          _sources,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  String toBase64() => (super.noSuchMethod(
        Invocation.method(
          #toBase64,
          [],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #toBase64,
            [],
          ),
        ),
      ) as String);

  @override
  void sign(String? privateKey) => super.noSuchMethod(
        Invocation.method(
          #sign,
          [privateKey],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<String> getTags(String? tag) => (super.noSuchMethod(
        Invocation.method(
          #getTags,
          [tag],
        ),
        returnValue: <String>[],
      ) as List<String>);

  @override
  String? getFirstTag(String? name) => (super.noSuchMethod(Invocation.method(
        #getFirstTag,
        [name],
      )) as String?);

  @override
  _i3.Nip01Event copyWith({
    String? pubKey,
    int? createdAt,
    int? kind,
    List<List<String>>? tags,
    String? content,
    String? sig,
    List<String>? sources,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #pubKey: pubKey,
            #createdAt: createdAt,
            #kind: kind,
            #tags: tags,
            #content: content,
            #sig: sig,
            #sources: sources,
          },
        ),
        returnValue: _FakeNip01Event_1(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #pubKey: pubKey,
              #createdAt: createdAt,
              #kind: kind,
              #tags: tags,
              #content: content,
              #sig: sig,
              #sources: sources,
            },
          ),
        ),
      ) as _i3.Nip01Event);
}

/// A class which mocks [Nip05].
///
/// See the documentation for Mockito's code generation for more information.
class MockNip05 extends _i1.Mock implements _i5.Nip05 {
  MockNip05() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get pubKey => (super.noSuchMethod(
        Invocation.getter(#pubKey),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#pubKey),
        ),
      ) as String);

  @override
  String get nip05 => (super.noSuchMethod(
        Invocation.getter(#nip05),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#nip05),
        ),
      ) as String);

  @override
  bool get valid => (super.noSuchMethod(
        Invocation.getter(#valid),
        returnValue: false,
      ) as bool);

  @override
  set pubKey(String? _pubKey) => super.noSuchMethod(
        Invocation.setter(
          #pubKey,
          _pubKey,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set nip05(String? _nip05) => super.noSuchMethod(
        Invocation.setter(
          #nip05,
          _nip05,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set valid(bool? _valid) => super.noSuchMethod(
        Invocation.setter(
          #valid,
          _valid,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set networkFetchTime(int? _networkFetchTime) => super.noSuchMethod(
        Invocation.setter(
          #networkFetchTime,
          _networkFetchTime,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set relays(List<String>? _relays) => super.noSuchMethod(
        Invocation.setter(
          #relays,
          _relays,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Nip05 copyWith({
    String? pubKey,
    String? nip05,
    bool? valid,
    int? networkFetchTime,
    List<String>? relays,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #pubKey: pubKey,
            #nip05: nip05,
            #valid: valid,
            #networkFetchTime: networkFetchTime,
            #relays: relays,
          },
        ),
        returnValue: _FakeNip05_3(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #pubKey: pubKey,
              #nip05: nip05,
              #valid: valid,
              #networkFetchTime: networkFetchTime,
              #relays: relays,
            },
          ),
        ),
      ) as _i5.Nip05);
}
